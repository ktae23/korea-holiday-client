/*
 * This source file was generated by the Gradle 'init' task
 */
package com.ktae23;

import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.jetbrains.annotations.NotNull;

import java.time.LocalDate;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class KoreaHolidayClient {

    private static final String API_URL = "http://apis.data.go.kr/B090041/openapi/service/SpcdeInfoService/getHoliDeInfo";

    private final KoreaHolidayClientCache cache;

    private final ObjectMapper objectMapper;

    private final OkHttpClient okHttpClient;

    private final String apiKey;

    private KoreaHolidayClient(String apiKey) {
        this.okHttpClient = new OkHttpClient();
        this.objectMapper = new ObjectMapper();
        this.apiKey = apiKey;
        this.cache = new KoreaHolidayClientCache();
    }

    public KoreaHolidayClient(final String apiKey, final OkHttpClient okHttpClient, final ObjectMapper objectMapper,
                              final KoreaHolidayClientCache cache) {
        this.okHttpClient = okHttpClient;
        this.objectMapper = objectMapper;
        this.apiKey = apiKey;
        this.cache = cache;
    }

    public boolean isHoliday(final LocalDate date) {
        final YearMonth yearMonth = YearMonth.from(date);
        final List<LocalDate> holidaysInMonth = getHolidaysInMonth(yearMonth);
        return holidaysInMonth.contains(date);
    }

    public boolean isWeekend(final LocalDate date) {
        return date.getDayOfWeek().getValue() >= 6;
    }

    public LocalDate afterNWorkingDays(final LocalDate startDate, final int n) {
        LocalDate currentDate = startDate;
        int daysAdded = 0;

        while (daysAdded < n) {
            currentDate = currentDate.plusDays(1);
            if (!isHoliday(currentDate) && !isWeekend(currentDate)) {
                daysAdded++;
            }
        }
        return currentDate;
    }

    public LocalDate beforeNWorkingDays(final LocalDate startDate, final int n) {
        LocalDate currentDate = startDate;
        int daysSubtracted = 0;

        while (daysSubtracted < n) {
            currentDate = currentDate.minusDays(1);
            if (!isHoliday(currentDate) && !isWeekend(currentDate)) {
                daysSubtracted++;
            }
        }
        return currentDate;
    }

    public List<LocalDate> getHolidaysInMonth(final YearMonth yearMonth) {
        final String url = String.format(
                API_URL + "?solYear=%d&solMonth=%02d&_type=json&ServiceKey=%s",
                yearMonth.getYear(),
                yearMonth.getMonthValue(),
                apiKey
        );
        return cache.getYearMonthListCache().get(yearMonth, ym -> fetch(url));
    }

    @NotNull
    private List<LocalDate> fetch(final String url) {
        final Request request = new Request.Builder()
                .url(url)
                .get()
                .build();

        try (Response response = okHttpClient.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new HolidayClientException("Failed to fetch holidays: " + response);
            }

            if (response.body() == null) {
                return List.of();
            }

            final String json = response.body().string();
            if (json.trim().isEmpty()) {
                return List.of();
            }
            final HolidayResponse holidayResponse = objectMapper.readValue(json, HolidayResponse.class);

            final List<LocalDate> holidays = new ArrayList<>();
            final List<HolidayResponse.Item> items = holidayResponse.response.body.items.item;

            if (items != null) {
                for (HolidayResponse.Item item : items) {
                    LocalDate date = LocalDate.parse(String.valueOf(item.localDate), DateTimeFormatter.ofPattern("yyyyMMdd"));
                    holidays.add(date);
                }
            }
            return holidays;
        } catch (Exception e) {
            throw new HolidayClientException("Error while calling holiday API", e);
        }
    }

    public List<LocalDate> getHolidaysInYear(final int year) {
        final String url = String.format(API_URL + "?solYear=%d&_type=json&ServiceKey=%s", year, apiKey);
        return cache.getYearListCache().get(year, ym -> fetch(url));
    }
}
